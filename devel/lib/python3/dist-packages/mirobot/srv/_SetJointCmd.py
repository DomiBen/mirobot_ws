# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mirobot/SetJointCmdRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetJointCmdRequest(genpy.Message):
  _md5sum = "97214505c9bd75117d40d909d9f08351"
  _type = "mirobot/SetJointCmdRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 jointAngle_1 
float32 jointAngle_2 
float32 jointAngle_3 
float32 jointAngle_4 
float32 jointAngle_5 
float32 jointAngle_6 
int32 speed 
"""
  __slots__ = ['jointAngle_1','jointAngle_2','jointAngle_3','jointAngle_4','jointAngle_5','jointAngle_6','speed']
  _slot_types = ['float32','float32','float32','float32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       jointAngle_1,jointAngle_2,jointAngle_3,jointAngle_4,jointAngle_5,jointAngle_6,speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetJointCmdRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.jointAngle_1 is None:
        self.jointAngle_1 = 0.
      if self.jointAngle_2 is None:
        self.jointAngle_2 = 0.
      if self.jointAngle_3 is None:
        self.jointAngle_3 = 0.
      if self.jointAngle_4 is None:
        self.jointAngle_4 = 0.
      if self.jointAngle_5 is None:
        self.jointAngle_5 = 0.
      if self.jointAngle_6 is None:
        self.jointAngle_6 = 0.
      if self.speed is None:
        self.speed = 0
    else:
      self.jointAngle_1 = 0.
      self.jointAngle_2 = 0.
      self.jointAngle_3 = 0.
      self.jointAngle_4 = 0.
      self.jointAngle_5 = 0.
      self.jointAngle_6 = 0.
      self.speed = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6fi().pack(_x.jointAngle_1, _x.jointAngle_2, _x.jointAngle_3, _x.jointAngle_4, _x.jointAngle_5, _x.jointAngle_6, _x.speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.jointAngle_1, _x.jointAngle_2, _x.jointAngle_3, _x.jointAngle_4, _x.jointAngle_5, _x.jointAngle_6, _x.speed,) = _get_struct_6fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6fi().pack(_x.jointAngle_1, _x.jointAngle_2, _x.jointAngle_3, _x.jointAngle_4, _x.jointAngle_5, _x.jointAngle_6, _x.speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.jointAngle_1, _x.jointAngle_2, _x.jointAngle_3, _x.jointAngle_4, _x.jointAngle_5, _x.jointAngle_6, _x.speed,) = _get_struct_6fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6fi = None
def _get_struct_6fi():
    global _struct_6fi
    if _struct_6fi is None:
        _struct_6fi = struct.Struct("<6fi")
    return _struct_6fi
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mirobot/SetJointCmdResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetJointCmdResponse(genpy.Message):
  _md5sum = "034a8e20d6a306665e3a5b340fab3f09"
  _type = "mirobot/SetJointCmdResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 result
"""
  __slots__ = ['result']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetJointCmdResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = 0
    else:
      self.result = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.result
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.result,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.result
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.result,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
class SetJointCmd(object):
  _type          = 'mirobot/SetJointCmd'
  _md5sum = 'b5f68cbcaa5e7a8e8c34ee9959541272'
  _request_class  = SetJointCmdRequest
  _response_class = SetJointCmdResponse
