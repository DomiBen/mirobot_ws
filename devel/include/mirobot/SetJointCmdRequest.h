// Generated by gencpp from file mirobot/SetJointCmdRequest.msg
// DO NOT EDIT!


#ifndef MIROBOT_MESSAGE_SETJOINTCMDREQUEST_H
#define MIROBOT_MESSAGE_SETJOINTCMDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mirobot
{
template <class ContainerAllocator>
struct SetJointCmdRequest_
{
  typedef SetJointCmdRequest_<ContainerAllocator> Type;

  SetJointCmdRequest_()
    : jointAngle_1(0.0)
    , jointAngle_2(0.0)
    , jointAngle_3(0.0)
    , jointAngle_4(0.0)
    , jointAngle_5(0.0)
    , jointAngle_6(0.0)
    , speed(0)  {
    }
  SetJointCmdRequest_(const ContainerAllocator& _alloc)
    : jointAngle_1(0.0)
    , jointAngle_2(0.0)
    , jointAngle_3(0.0)
    , jointAngle_4(0.0)
    , jointAngle_5(0.0)
    , jointAngle_6(0.0)
    , speed(0)  {
  (void)_alloc;
    }



   typedef float _jointAngle_1_type;
  _jointAngle_1_type jointAngle_1;

   typedef float _jointAngle_2_type;
  _jointAngle_2_type jointAngle_2;

   typedef float _jointAngle_3_type;
  _jointAngle_3_type jointAngle_3;

   typedef float _jointAngle_4_type;
  _jointAngle_4_type jointAngle_4;

   typedef float _jointAngle_5_type;
  _jointAngle_5_type jointAngle_5;

   typedef float _jointAngle_6_type;
  _jointAngle_6_type jointAngle_6;

   typedef int32_t _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::mirobot::SetJointCmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mirobot::SetJointCmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetJointCmdRequest_

typedef ::mirobot::SetJointCmdRequest_<std::allocator<void> > SetJointCmdRequest;

typedef boost::shared_ptr< ::mirobot::SetJointCmdRequest > SetJointCmdRequestPtr;
typedef boost::shared_ptr< ::mirobot::SetJointCmdRequest const> SetJointCmdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mirobot::SetJointCmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mirobot::SetJointCmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mirobot::SetJointCmdRequest_<ContainerAllocator1> & lhs, const ::mirobot::SetJointCmdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.jointAngle_1 == rhs.jointAngle_1 &&
    lhs.jointAngle_2 == rhs.jointAngle_2 &&
    lhs.jointAngle_3 == rhs.jointAngle_3 &&
    lhs.jointAngle_4 == rhs.jointAngle_4 &&
    lhs.jointAngle_5 == rhs.jointAngle_5 &&
    lhs.jointAngle_6 == rhs.jointAngle_6 &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mirobot::SetJointCmdRequest_<ContainerAllocator1> & lhs, const ::mirobot::SetJointCmdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mirobot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mirobot::SetJointCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mirobot::SetJointCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mirobot::SetJointCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mirobot::SetJointCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mirobot::SetJointCmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mirobot::SetJointCmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mirobot::SetJointCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "97214505c9bd75117d40d909d9f08351";
  }

  static const char* value(const ::mirobot::SetJointCmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x97214505c9bd7511ULL;
  static const uint64_t static_value2 = 0x7d40d909d9f08351ULL;
};

template<class ContainerAllocator>
struct DataType< ::mirobot::SetJointCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mirobot/SetJointCmdRequest";
  }

  static const char* value(const ::mirobot::SetJointCmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mirobot::SetJointCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 jointAngle_1 \n"
"float32 jointAngle_2 \n"
"float32 jointAngle_3 \n"
"float32 jointAngle_4 \n"
"float32 jointAngle_5 \n"
"float32 jointAngle_6 \n"
"int32 speed \n"
;
  }

  static const char* value(const ::mirobot::SetJointCmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mirobot::SetJointCmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.jointAngle_1);
      stream.next(m.jointAngle_2);
      stream.next(m.jointAngle_3);
      stream.next(m.jointAngle_4);
      stream.next(m.jointAngle_5);
      stream.next(m.jointAngle_6);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetJointCmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mirobot::SetJointCmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mirobot::SetJointCmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "jointAngle_1: ";
    Printer<float>::stream(s, indent + "  ", v.jointAngle_1);
    s << indent << "jointAngle_2: ";
    Printer<float>::stream(s, indent + "  ", v.jointAngle_2);
    s << indent << "jointAngle_3: ";
    Printer<float>::stream(s, indent + "  ", v.jointAngle_3);
    s << indent << "jointAngle_4: ";
    Printer<float>::stream(s, indent + "  ", v.jointAngle_4);
    s << indent << "jointAngle_5: ";
    Printer<float>::stream(s, indent + "  ", v.jointAngle_5);
    s << indent << "jointAngle_6: ";
    Printer<float>::stream(s, indent + "  ", v.jointAngle_6);
    s << indent << "speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIROBOT_MESSAGE_SETJOINTCMDREQUEST_H
