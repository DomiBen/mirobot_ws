// Generated by gencpp from file mirobot/GetPoseCmdResponse.msg
// DO NOT EDIT!


#ifndef MIROBOT_MESSAGE_GETPOSECMDRESPONSE_H
#define MIROBOT_MESSAGE_GETPOSECMDRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mirobot
{
template <class ContainerAllocator>
struct GetPoseCmdResponse_
{
  typedef GetPoseCmdResponse_<ContainerAllocator> Type;

  GetPoseCmdResponse_()
    : result(0)
    , state(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , a(0.0)
    , b(0.0)
    , c(0.0)
    , jointAngle_1(0.0)
    , jointAngle_2(0.0)
    , jointAngle_3(0.0)
    , jointAngle_4(0.0)
    , jointAngle_5(0.0)
    , jointAngle_6(0.0)
    , jointAngle_7(0.0)  {
    }
  GetPoseCmdResponse_(const ContainerAllocator& _alloc)
    : result(0)
    , state(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , a(0.0)
    , b(0.0)
    , c(0.0)
    , jointAngle_1(0.0)
    , jointAngle_2(0.0)
    , jointAngle_3(0.0)
    , jointAngle_4(0.0)
    , jointAngle_5(0.0)
    , jointAngle_6(0.0)
    , jointAngle_7(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _result_type;
  _result_type result;

   typedef int32_t _state_type;
  _state_type state;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _a_type;
  _a_type a;

   typedef float _b_type;
  _b_type b;

   typedef float _c_type;
  _c_type c;

   typedef float _jointAngle_1_type;
  _jointAngle_1_type jointAngle_1;

   typedef float _jointAngle_2_type;
  _jointAngle_2_type jointAngle_2;

   typedef float _jointAngle_3_type;
  _jointAngle_3_type jointAngle_3;

   typedef float _jointAngle_4_type;
  _jointAngle_4_type jointAngle_4;

   typedef float _jointAngle_5_type;
  _jointAngle_5_type jointAngle_5;

   typedef float _jointAngle_6_type;
  _jointAngle_6_type jointAngle_6;

   typedef float _jointAngle_7_type;
  _jointAngle_7_type jointAngle_7;





  typedef boost::shared_ptr< ::mirobot::GetPoseCmdResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mirobot::GetPoseCmdResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetPoseCmdResponse_

typedef ::mirobot::GetPoseCmdResponse_<std::allocator<void> > GetPoseCmdResponse;

typedef boost::shared_ptr< ::mirobot::GetPoseCmdResponse > GetPoseCmdResponsePtr;
typedef boost::shared_ptr< ::mirobot::GetPoseCmdResponse const> GetPoseCmdResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mirobot::GetPoseCmdResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mirobot::GetPoseCmdResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mirobot::GetPoseCmdResponse_<ContainerAllocator1> & lhs, const ::mirobot::GetPoseCmdResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.state == rhs.state &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.a == rhs.a &&
    lhs.b == rhs.b &&
    lhs.c == rhs.c &&
    lhs.jointAngle_1 == rhs.jointAngle_1 &&
    lhs.jointAngle_2 == rhs.jointAngle_2 &&
    lhs.jointAngle_3 == rhs.jointAngle_3 &&
    lhs.jointAngle_4 == rhs.jointAngle_4 &&
    lhs.jointAngle_5 == rhs.jointAngle_5 &&
    lhs.jointAngle_6 == rhs.jointAngle_6 &&
    lhs.jointAngle_7 == rhs.jointAngle_7;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mirobot::GetPoseCmdResponse_<ContainerAllocator1> & lhs, const ::mirobot::GetPoseCmdResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mirobot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mirobot::GetPoseCmdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mirobot::GetPoseCmdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mirobot::GetPoseCmdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mirobot::GetPoseCmdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mirobot::GetPoseCmdResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mirobot::GetPoseCmdResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mirobot::GetPoseCmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5aef3792e74d728815d4dfbf8b1f490f";
  }

  static const char* value(const ::mirobot::GetPoseCmdResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5aef3792e74d7288ULL;
  static const uint64_t static_value2 = 0x15d4dfbf8b1f490fULL;
};

template<class ContainerAllocator>
struct DataType< ::mirobot::GetPoseCmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mirobot/GetPoseCmdResponse";
  }

  static const char* value(const ::mirobot::GetPoseCmdResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mirobot::GetPoseCmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 result\n"
"int32 state\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 a\n"
"float32 b\n"
"float32 c\n"
"float32 jointAngle_1\n"
"float32 jointAngle_2\n"
"float32 jointAngle_3\n"
"float32 jointAngle_4\n"
"float32 jointAngle_5\n"
"float32 jointAngle_6\n"
"float32 jointAngle_7\n"
"\n"
;
  }

  static const char* value(const ::mirobot::GetPoseCmdResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mirobot::GetPoseCmdResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.state);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.a);
      stream.next(m.b);
      stream.next(m.c);
      stream.next(m.jointAngle_1);
      stream.next(m.jointAngle_2);
      stream.next(m.jointAngle_3);
      stream.next(m.jointAngle_4);
      stream.next(m.jointAngle_5);
      stream.next(m.jointAngle_6);
      stream.next(m.jointAngle_7);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetPoseCmdResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mirobot::GetPoseCmdResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mirobot::GetPoseCmdResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result);
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "a: ";
    Printer<float>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<float>::stream(s, indent + "  ", v.b);
    s << indent << "c: ";
    Printer<float>::stream(s, indent + "  ", v.c);
    s << indent << "jointAngle_1: ";
    Printer<float>::stream(s, indent + "  ", v.jointAngle_1);
    s << indent << "jointAngle_2: ";
    Printer<float>::stream(s, indent + "  ", v.jointAngle_2);
    s << indent << "jointAngle_3: ";
    Printer<float>::stream(s, indent + "  ", v.jointAngle_3);
    s << indent << "jointAngle_4: ";
    Printer<float>::stream(s, indent + "  ", v.jointAngle_4);
    s << indent << "jointAngle_5: ";
    Printer<float>::stream(s, indent + "  ", v.jointAngle_5);
    s << indent << "jointAngle_6: ";
    Printer<float>::stream(s, indent + "  ", v.jointAngle_6);
    s << indent << "jointAngle_7: ";
    Printer<float>::stream(s, indent + "  ", v.jointAngle_7);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIROBOT_MESSAGE_GETPOSECMDRESPONSE_H
